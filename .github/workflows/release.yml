name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    name: Release for ${{ matrix.config.target }} / ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-latest
            artifact_name: bunner-macroquad
            zip_file: bunner-macroquad-linux.tar.gz
            asset_name: bunner-macroquad-linux-$tag.tar.gz
            directory: bunner-macroquad-linux-${{ github.ref_name }}
            target: 'x86_64-unknown-linux-gnu'
          - os: windows-latest
            artifact_name: bunner-macroquad.exe
            zip_file: bunner-macroquad-windows.zip
            asset_name: bunner-macroquad-windows-$tag.zip
            directory: bunner-macroquad-windows-${{ github.ref_name }}
            target: 'x86_64-pc-windows-msvc'
          - os: macos-latest
            artifact_name: bunner-macroquad
            zip_file: bunner-macroquad-macos.zip
            asset_name: bunner-macroquad-macos-$tag.zip
            directory: bunner-macroquad-macos-${{ github.ref_name }}
            target: 'x86_64-apple-darwin'
          - os: ubuntu-latest
            artifact_name: bunner-macroquad.wasm
            zip_file: bunner-macroquad-wasm.zip
            asset_name: bunner-macroquad-wasm-$tag.zip
            directory: bunner-macroquad-wasm-${{ github.ref_name }}
            target: 'wasm32-unknown-unknown'
        include:
          - os: ubuntu-latest
            packages: libx11-dev libxi-dev libgl1-mesa-dev gcc-mingw-w64 libasound2-dev libssl-dev pkg-config

    steps:
      - uses: actions/checkout@v2
      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -yq --no-install-suggests --no-install-recommends install ${{ matrix.packages }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.config.target }}
          override: true
      - name: Workaround MinGW issue # https://github.com/rust-lang/rust/issues/47048
        if: runner.os == 'Linux' && matrix.config.target == 'x86_64-pc-windows-gnu'
        run: |
          sudo cp /usr/x86_64-w64-mingw32/lib/dllcrt2.o  ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib/dllcrt2.o
          sudo cp /usr/x86_64-w64-mingw32/lib/crt2.o  ~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-pc-windows-gnu/lib/crt2.o
          echo "[target.x86_64-pc-windows-gnu]" >> ~/.cargo/config
          echo "linker = \"/usr/bin/x86_64-w64-mingw32-gcc\"" >> ~/.cargo/config
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --all-targets --target=${{ matrix.config.target }}
      - name: Zip release archive
        if: matrix.config.target == 'wasm32-unknown-unknown'
        run: |
          mkdir ${{ matrix.config.directory }}
          cp -pR resources ${{ matrix.config.directory }}/
          cp -pR target/${{ matrix.config.target }}/release/${{ matrix.config.artifact_name }} demo/index.html demo/mq_js_bundle.js demo/manifest.json ${{ matrix.config.directory }}/
          zip -r ${{ matrix.config.zip_file }} ${{ matrix.config.directory }}
      - name: Zip release archive
        if: matrix.config.target == 'x86_64-unknown-linux-gnu'
        run: |
          mkdir ${{ matrix.config.directory }}
          cp -pR resources ${{ matrix.config.directory }}/
          cp target/${{ matrix.config.target }}/release/${{ matrix.config.artifact_name }} ${{ matrix.config.directory }}/
          tar -zcf ${{ matrix.config.zip_file }} ${{ matrix.config.directory }}
      - name: Zip release archive
        if: runner.os == 'Windows' || runner.os == 'macOS'
        run: |
          mkdir -p ${{ matrix.config.directory }}
          cp -R resources ${{ matrix.config.directory }}/
          cp target/${{ matrix.config.target }}/release/${{ matrix.config.artifact_name }} ${{ matrix.config.directory }}/
          7z a -tzip ${{ matrix.config.zip_file }} ${{ matrix.config.directory }}
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ matrix.config.zip_file }}
          asset_name: ${{ matrix.config.asset_name }}
          tag: ${{ github.ref }}
